name: Hospital API CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'
  DOCKER_IMAGE_NAME: hospital-api

jobs:
  # Job 1: Code Quality & Linting
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort pylint
    
    - name: 🎨 Check code formatting with Black
      run: |
        black --check --diff . || echo "::warning::Code formatting issues found. Run 'black .' locally to fix."
    
    - name: 📋 Check import sorting with isort
      run: |
        isort --check-only --diff . || echo "::warning::Import sorting issues found. Run 'isort .' locally to fix."
    
    - name: 🔍 Lint with Flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 🔬 Analyze with Pylint
      run: |
        pip install -r requirements.txt
        pylint hospital --fail-under=7.0 --disable=C0114,C0115,C0116 || true
      continue-on-error: true

  # Job 2: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: 🔐 Run Safety check
      run: |
        safety check --json || true
      continue-on-error: true
    
    - name: 🛡️ Run Bandit security scan
      run: |
        bandit -r hospital -f json -o bandit-report.json || true
      continue-on-error: true
    
    - name: 📤 Upload Bandit Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json
        retention-days: 30

  # Job 3: Run Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_hospital_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest pytest-django pytest-cov
    
    - name: 🔧 Create Test Settings
      run: |
        cat > hospital_project/test_settings.py << EOL
        from .settings import *
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': 'test_hospital_db',
                'USER': 'test_user',
                'PASSWORD': 'test_password',
                'HOST': 'localhost',
                'PORT': '5432',
            }
        }
        SECRET_KEY = 'test-secret-key-for-ci-cd-pipeline'
        DEBUG = True
        ALLOWED_HOSTS = ['*']
        EOL
    
    - name: 🗄️ Run Migrations
      env:
        DJANGO_SETTINGS_MODULE: hospital_project.test_settings
      run: |
        python manage.py migrate --noinput
    
    - name: 🧪 Run Tests with Coverage
      env:
        DJANGO_SETTINGS_MODULE: hospital_project.test_settings
      run: |
        coverage run --source='hospital' manage.py test hospital
        coverage report -m
        coverage xml
        coverage html
    
    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-hospital-api
        fail_ci_if_error: false
    
    - name: 📤 Upload Coverage HTML Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: htmlcov/
        retention-days: 30
    
    - name: 📈 Coverage Comment
      uses: py-cov-action/python-coverage-comment-action@v3
      if: github.event_name == 'pull_request'
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 70
        MINIMUM_ORANGE: 50
      continue-on-error: true

  # Job 4: Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    if: github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    
    - name: 🔍 Scan Docker Image for Vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: 📤 Upload Trivy Results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true

  # Job 5: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.hospital-api.com
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🚀 Deploy to Staging Server via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT || 22 }}
        script: |
          cd /var/www/hospital_api
          git pull origin develop
          docker-compose pull
          docker-compose down
          docker-compose up -d --force-recreate
          docker-compose exec -T web python manage.py migrate --noinput
          docker-compose exec -T web python manage.py collectstatic --noinput
          docker-compose exec -T web python manage.py check --deploy
    
    - name: 🏥 Health Check
      run: |
        sleep 30
        curl -f https://staging.hospital-api.com/api/ || exit 1
    
    - name: 💬 Notify Slack
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: 'Staging deployment ${{ job.status }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # Job 6: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://api.hospital.com
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🗄️ Backup Database
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          cd /var/www/hospital_api
          timestamp=$(date +%Y%m%d_%H%M%S)
          docker-compose exec -T db pg_dump -U hospital_user hospital_db > backups/backup_${timestamp}.sql
          echo "Database backed up to backup_${timestamp}.sql"
    
    - name: 🚀 Deploy to Production Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          cd /var/www/hospital_api
          git pull origin main
          docker-compose pull
          docker-compose down
          docker-compose up -d --force-recreate
          docker-compose exec -T web python manage.py migrate --noinput
          docker-compose exec -T web python manage.py collectstatic --noinput
          docker-compose exec -T web python manage.py check --deploy
          docker-compose exec -T web python manage.py clearsessions
    
    - name: 🏥 Production Health Check
      run: |
        sleep 30
        for i in {1..5}; do
          if curl -f https://api.hospital.com/api/; then
            echo "Health check passed"
            exit 0
          fi
          echo "Health check attempt $i failed, retrying..."
          sleep 10
        done
        exit 1
    
    - name: 📧 Send Email Notification
      uses: dawidd6/action-send-mail@v3
      if: always()
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: 'Hospital API Production Deployment ${{ job.status }}'
        body: |
          Deployment Status: ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          Message: ${{ github.event.head_commit.message }}
        to: devops@hospital.com
        from: GitHub Actions
    
    - name: 💬 Notify Slack
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: '🏥 Hospital API Production Deployment ${{ job.status }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
    
    - name: 🏷️ Create Release Tag
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Production deployment completed successfully
          
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
        draft: false
        prerelease: false

  